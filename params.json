{"name":"RockWall.PHP","tagline":"Tiny (less than 30kb) and powerful JSON RESTful web-service engine for PHP","body":"# RockWall.PHP\r\n\r\nTiny (less than 30kb) and powerful JSON RESTful web-service engine for PHP :elephant:.\r\n\r\n\r\nBasic useful feature list:\r\n\r\n* Multiple requests (REST API) via single HTTP request.\r\n* Unified and stable response format for all requests.\r\n* Endpoint method execution by dependency of type detection (static or whether not).\r\n* Request modifiers feature. Allows to declare which type of class instance should be used for each request (New instance, Singleton or new instance of Singleton).\r\n* Fatal exceptions catching for every endpoint on low-level.\r\n* Cross-domain AJAX requests support.\r\n* Database PDO singleton instance available.\r\n* One instance of engine for multiple different REST servers with different configurations.\r\n* Extra simple in use and well structured in filesystem.\r\n* Client side sandbox available for testing.\r\n\r\n## Quick Start Example\r\n\r\n### Client side\r\n\r\n```javascript\r\nvar url = '//your.server.url';\r\nvar request = {\r\n    \"request\":\r\n        [\r\n          { \"cmd\":\"namespace/class/method\" , \"args\":{\"Awesome\":\"Hello World!\"} },\r\n          { \"cmd\":\"namespace/class/method\" , \"args\":{\"makeError\":true} },\r\n          { \"cmd\":\"not/existing/endpoint\" },\r\n          { \"cmd\":\"error-command\"         },\r\n          { \"cmd\":\"namespace/class/method\"}\r\n        ]\r\n};\r\n\r\n$.ajax(url, {\r\n    type: 'POST',\r\n    data: request,\r\n    success: function (response) {\r\n        // See \"Server response\"\r\n        console.log(response);\r\n    }\r\n});\r\n```\r\n\r\n### Server side\r\n\r\n```php\r\n<?php // File: {server}/namespace/class.php\r\n\r\nclass svc_namespace_class {\r\n\r\n    private $increment = 0;\r\n\r\n    public\r\n    function method (array $args, $cmd) {\r\n        $this->increment++;\r\n\r\n        if (isset($args[\"makeError\"])) {\r\n            return new response(null, \"Awesome error\", 12345);\r\n        }\r\n\r\n        $data = $args;\r\n        $data[\"increment\"] = $this->increment;\r\n        return new response($data);\r\n    }\r\n\r\n}\r\n\r\n```\r\n\r\n### Server response\r\n```javascript\r\n// response variable in success callback\r\n{\r\n    \"error\"  : \"Awesome error\",\r\n    \"code\"   : 12345,\r\n    \"errors\" :\r\n        {\r\n            // The key is the same as index in the data array\r\n            \"1\" : { \"error\":\"Awesome error\" , \"code\":12345 } ,\r\n            \"2\" : { \"error\":\"Not found\" , \"code\":404 } ,\r\n            \"3\" : { \"error\":\"Invalid request\"  , \"code\":400 } ,\r\n        },\r\n    \"data\"   :\r\n        [\r\n         /*0*/ { \"data\" : {\"increment\":1 , \"Awesome\":\"Hello World!\"} } ,\r\n         /*1*/ { \"error\":\"Awesome error\" , \"code\":12345 },\r\n         /*2*/ { \"error\":\"Not found\" , \"code\":404 } ,\r\n         /*3*/ { \"error\":\"Invalid request\"  , \"code\":400 } ,\r\n         /*4*/ { \"data\" : {\"increment\":3} }\r\n        ]\r\n}\r\n```\r\n\r\n> Note:\r\n> In the root directory of engine you can find\r\n> \"[sandbox.html](https://github.com/rockwall/RockWall.PHP/blob/master/sandbox.html \"Download the file and put it where you need\")\"\r\n> file, that can be useful for testing and development of your server from client.\r\n> \r\n> [Online version](https://rawgit.com/rockwall/RockWall.PHP/master/sandbox.html \"Visit online version of RockWall REST Server Sandbox\") (For remote testing only)\r\n\r\n## Client API\r\n\r\nThis engine allows quick and simple to create data channel between client and\r\nserver and provides opportunity to execute multiple REST requests via single\r\nHTTP request that increases performance of client through decreasing amount of\r\nHTTP requests.\r\n\r\nTo working with any endpoint of server and generally with server, used unified\r\nsystem of Request and Response objects.\r\n\r\n### Request object\r\n\r\nRequest object allows to describe which endpoints of server should be called,\r\nan order of execution, environment of execution for every endpoint and which\r\narguments should to be passed for every endpoint call.\r\n\r\n#### Request object structure\r\n\r\nRequest object should to be passed to the server as `request` variable that is\r\nan array of objects.\r\n\r\nEvery object of array describes the call to the different endpoints of the\r\nserver and should contains the `cmd` (command) property and `args` property as\r\nan optional.\r\n\r\n\r\n```javascript\r\n{\r\n  \"request\":\r\n    [\r\n      { \"cmd\":String , \"args\":Object },\r\n      ...\r\n    ]\r\n}\r\n```\r\n\r\nThe command is a slash separated string that describes a path to the endpoint\r\non the server and should consists of `namespace`, `class` and `method`.\r\nThe `class` can be not defined for the case when is the main class of\r\n`namespace` (has a name that same as namespace name).\r\n\r\n```javascript\r\n\"cmd\": \"namespace/class/method\"\r\n```\r\nor\r\n```javascript\r\n\"cmd\": \"namespace/method\"\r\n```\r\n\r\nAlso the command can contain modifier that defines which environment should be\r\nused for each call.\r\n\r\n#### Modifiers\r\n\r\nThe method can be called at the new instance of class or Singleton instance\r\nthat life cycle limited by life cycle of HTTP request.\r\nThe modifier is a command prefix that can be one of the follow:\r\n\r\n| Modifier | Description                                                                   | Example                 |\r\n|:--------:|:------------------------------------------------------------------------------|:------------------------|\r\n|    @     | Creates the new instance of class for method execution                        | @namespace/class/method |\r\n|    &     | `Default` Uses Singleton instance of class or creates if it in not exists yet | &namespace/class/method |\r\n|    !     | Replaces old Singleton instance by new instance of class and uses it          | !namespace/class/method |\r\n\r\n\r\n**Example for JavaScript AJAX request by using jQuery**\r\n\r\n```javascript\r\nvar url = '//your.server.url';\r\nvar request = {\r\n    \"request\":\r\n        [\r\n          { \"cmd\":\"namespace/class/method\" , \"args\":{\"hello\":\"world\"} },\r\n          { \"cmd\":\"namespace/method\"      },\r\n          { \"cmd\":\"&namespace/method\"     },\r\n          { \"cmd\":\"!namespace/method\"     },\r\n          { \"cmd\":\"@namespace/method\"     },\r\n          { \"cmd\":\"not/existing/endpoint\" },\r\n          { \"cmd\":\"error-command\"         }\r\n        ]\r\n};\r\n\r\n$.ajax(url, {\r\n    type: 'POST',\r\n    data: request,\r\n    success: function (response) {\r\n        // Process response object here\r\n        console.log(response);\r\n    }\r\n});\r\n```\r\n\r\n### Response object\r\n\r\nThe engine provides unified response object structure for working with every\r\nendpoint of server and generally with server that allows to simplify for using\r\nand understanding it for even for junior developer.\r\n\r\n**Response object instance can be of two types:**\r\n\r\n`Single` : Simple object with `data` property when successful whether `error`\r\n           and `code` properties when error occurred.\r\n\r\n**Result is successful**\r\n```javascript\r\n{\r\n    \"data\" : Mixed\r\n}\r\n```\r\n\r\n**When error occured**\r\n```javascript\r\n{\r\n    \"error\" : String,\r\n    \"code\"  : Number\r\n}\r\n```\r\n\r\n`Multiple` : is a collection of `simple` responses where `error` and `code`\r\n             properties is an error of FIRST simple response that returns error\r\n             and located in `data` array.\r\n\r\nThe list of all errors of `multiple` response is available in `errors` object.\r\n\r\n`errors` - is an object of objects. Each child of `errors` is object that named\r\n           as his `index` in `data` array.\r\n\r\n**Multiple response structure**\r\n\r\n```javascript\r\n{\r\n    // [Optional] An error message of FIRST simple response of the queue that returns error\r\n    \"error\"  : String,\r\n    // [Optional] An error code of FIRST simple response of the queue that returns error\r\n    \"code\"   : Number,\r\n    // [Optional] The list of all errors of the queue\r\n    \"errors\" :\r\n        {\r\n            \"(index in data array)\" : { \"error\":String , \"code\":Number } ,\r\n            // ...\r\n        },\r\n    \"data\"   :\r\n        [\r\n            { \"data\" :Mixed },\r\n            { \"error\":String , \"code\":Number } ,\r\n            // ...\r\n        ]\r\n}\r\n```\r\n\r\n**For example**\r\n\r\nThe client sent request to the server and server returns errors for the second\r\nand third commands.\r\n\r\nRequest object:\r\n\r\n```javascript\r\n{\r\n    \"request\":\r\n        [\r\n          { \"cmd\":\"namespace/class/method\" },\r\n          { \"cmd\":\"not/existing/endpoint\"  },\r\n          { \"cmd\":\"error-command\"          },\r\n          { \"cmd\":\"namespace/method\"       }\r\n        ]\r\n}\r\n```\r\n\r\nResponse object:\r\n\r\n```javascript\r\n{\r\n    \"error\"  : \"An error occurred (second)\",\r\n    \"code\"   : 12345,\r\n    \"errors\" :\r\n        {\r\n            // The key is the same as index in the data array\r\n            \"1\" : { \"error\":\"An error occurred (second)\" , \"code\":12345 } ,\r\n            \"2\" : { \"error\":\"An error occurred (third)\"  , \"code\":67890 } ,\r\n        },\r\n    \"data\"   :\r\n        [\r\n         /*0*/ { \"data\" : {/*Some data*/} } ,\r\n         /*1*/ { \"error\":\"An error occurred (second)\" , \"code\":12345 } ,\r\n         /*2*/ { \"error\":\"An error occurred (third)\"  , \"code\":67890 } ,\r\n         /*3*/ { \"data\" : {/*Some data*/} }\r\n        ]\r\n}\r\n```\r\n\r\n## Server API\r\n\r\n> The engine is written it so that allows to reuse one instance for multiple\r\n> different REST servers with different configurations. Has no sense to\r\n> duplicate engine instances for every REST server. Practically, will be better\r\n> put one instance of engine beyond the pale of document root and include it\r\n> where it need.\r\n\r\n### Installation\r\n\r\nDownload the engine as ZIP archive from\r\n[[here](https://github.com/rockwall/RockWall.PHP/archive/master.zip \"ZIP archive\")]\r\nand unpack it OR clone GIT project of engine from\r\n[[here](https://github.com/rockwall/RockWall.PHP.git \"GIT repository\")].\r\n\r\nPut the instance of engine beyond the pale of document root.\r\n\r\n### Integration\r\n\r\nCreate your REST server that should include the main endpoint file `index.php`,\r\nconfig file `config.php` and the folder `svc` where you want to deploy your services.\r\n\r\n> Any part of your REST-server is independent and can be renamed or moved where you want.\r\n> The only thing that you have to do is to define path to the parent folder of your services\r\n> in configuration file and include to endpoint file your configuration file.\r\n\r\nThe `config.php` file:\r\n\r\nThe configuration file should implement the `config` class with structure same as shown below\r\n\r\n```php\r\n<?php\r\n\r\nclass config {\r\n\r\n    public static\r\n    function db () { //optional\r\n        $o = new stdClass;\r\n        $o->host = 'Your DB Host';\r\n        $o->user = 'Your DB User';\r\n        $o->pasw = 'Your DB Password';\r\n        $o->name = 'Your DB Name';\r\n        return $o;\r\n    }\r\n\r\n    public static\r\n    function dir () {\r\n        $o = new stdClass;\r\n\r\n        // Enter your path to the directory where located your services\r\n        $o->svc = __DIR__;\r\n\r\n        return $o;\r\n    }\r\n\r\n    public static\r\n    function main () {\r\n        $o = new stdClass;\r\n\r\n        // The classname prefix. Format: {prefix}_{namespace}[_{class}]\r\n        $o->prefix = 'svc';\r\n\r\n        // @ : The new instance | & : Singleton | ! : Rewrite Singleton instance\r\n        $o->defaultModifier = '&';\r\n\r\n        // Use default modifier for all or not\r\n        $o->strictModifier = false;\r\n\r\n        return $o;\r\n    }\r\n\r\n}\r\n```\r\n\r\nThe `index.php` file:\r\n\r\n```php\r\n<?php\r\n\r\n// Include the `.inc.php` file that located in the main directory of engine\r\nrequire_once('/engine/.inc.php');\r\n\r\n// Include your custom configuration file\r\nrequire_once('/servers/provider.X/config.php');\r\n\r\n// Start the engine initialization process\r\nsvc::init();\r\n```\r\n\r\nIn practice, the most optimal and safe structure in file system is presented below:\r\n\r\n```\r\n[engine]\r\n  | .inc.php\r\n\r\n[servers]\r\n  | [provider.1]\r\n  | [provider.2]\r\n  | ...\r\n  | [provider.X]\r\n      | config.php\r\n      | [namespace1]\r\n      | [namespace2]\r\n      | ...\r\n      | [namespaceX]\r\n          | class1.php\r\n          | class2.php\r\n          | ...\r\n          | classX.php\r\n\r\n[www]\r\n  | [document root of provider.1]\r\n  | [document root of provider.2]\r\n  | ...\r\n  | [document root of provider.X]\r\n      | index.php\r\n```\r\n\r\n### Services implementation\r\n\r\n**Agreements of implementation:**\r\n\r\n* Each endpoint is a public method of class.\r\n* Each class should be implemented into the own file.\r\n* The name of file should to be same as logical name of class.\r\n* The name of class should contain an information about the namespace,\r\n  own logic name and the prefix that is defined by configuration that\r\n  required to avoid name collisions.\r\n* The name of main class (if exists) of namespace should contain all\r\n  foregoing information, except of logical name of class that is same\r\n  as name of namespace.\r\n* Any endpoints can be logically combined as methods of mutual class\r\n  and/or by mutual folder of classes (aka. namespace).\r\n* Any method can be called at the new instance of class or Singleton instance\r\n  that life cycle limited by life cycle of HTTP request and defined by client\r\n  (see [Modifiers](#modifiers)) or configuration\r\n  (see [defaultModifier, strictModifier](#integration)).\r\n* Each endpoint should return an instance of `response` class that\r\n  allows to declare besides of response data also error of execution.\r\n\r\nBased on the foregoing we have something like this:\r\n\r\nFor the client side request\r\n```javascript\r\n{\r\n    \"request\":\r\n        [\r\n          { \"cmd\":\"namespace/class/method\" , \"args\":{\"hello\":\"world\"} },\r\n          { \"cmd\":\"namespace/method\"       , \"args\":{\"hello\":\"world\"} }\r\n        ]\r\n}\r\n```\r\nOn the server side should be implemented next\r\n\r\n`namespace/class.php`:\r\n```php\r\n<?php\r\n\r\nclass svc_namespace_class {\r\n\r\n    public function method (array $args, $cmd) {\r\n        $data = null;\r\n        return new response($data);\r\n    }\r\n\r\n}\r\n\r\n```\r\n\r\n`namespace/namespace.php`:\r\n```php\r\n<?php\r\n\r\nclass svc_namespace {\r\n\r\n    public function method (array $args, $cmd) {\r\n        $data = null;\r\n        return new response($data);\r\n    }\r\n\r\n}\r\n\r\n```\r\n\r\n### Extra features\r\n\r\nIn addition the engine provides Singleton instance of\r\n[PDO](http://php.net/manual/en/book.pdo.php \"PHP Data Object\") connector for MySQL.\r\nThis feature is optional.\r\n\r\nConnection credentials can be defined by [configuration](#integration).\r\n\r\nThe function `db()` is available from any environment and returns the instance of connector.\r\n\r\nUsage example:\r\n```php\r\n$date = db()->query('SELECT NOW() AS date')->fetchObject()->date;\r\n```\r\n> The complete documentation for PDO (PHP Data Objects) can be found\r\n> [here](http://php.net/manual/en/book.pdo.php \"PHP Data Objects\").\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}